import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { ChatMessage, ChatResponse, PromptTemplate } from '../interfaces';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root',
})
export class ChatService {
  private apiUrl =environment.apiUrl;
  private messagesSubject = new BehaviorSubject<ChatMessage[]>([
    {
      role: 'assistant',
      content: `Bonjour, je suis votre assistant Miuuu 1.

Je propose des fonctionnalit√©s avanc√©es pour r√©pondre √† vos besoins :

‚Ä¢ Analyse d‚Äôimages : description, OCR, compr√©hension visuelle
‚Ä¢ G√©n√©ration et correction de code : tous langages, optimisation incluse
‚Ä¢ Traitement de documents longs
‚Ä¢ Raisonnement multimodal : compr√©hension combin√©e texte + image
‚Ä¢ Support multilingue : 12 langues disponibles

Comment puis-je vous assister aujourd‚Äôhui ?`,
      timestamp: new Date(),
      type: 'text',
    },
  ]);

  public messages$ = this.messagesSubject.asObservable();

  // Templates de prompts pr√©d√©finis
  public promptTemplates: PromptTemplate[] = [
    {
      id: 'image-analyze',
      name: 'Analyser une image',
      description: 'Description d√©taill√©e, objets, couleurs, composition',
      prompt:
        "Analyse cette image en d√©tail. D√©cris les objets, les couleurs, la composition, l'ambiance et tout √©l√©ment notable que tu observes.",
      category: 'image',
      icon: 'üñºÔ∏è',
    },
    {
      id: 'image-ocr',
      name: 'Extraire le texte (OCR)',
      description: 'Lire et extraire tout le texte visible',
      prompt:
        'Extrait et transcris tout le texte visible dans cette image. Organise-le de mani√®re claire et lisible.',
      category: 'image',
      icon: 'üìù',
    },
    {
      id: 'code-review',
      name: 'Review de code',
      description: 'Analyser et am√©liorer le code',
      prompt:
        'Fais une review compl√®te de ce code. Identifie les probl√®mes potentiels, propose des am√©liorations en termes de performance, lisibilit√© et bonnes pratiques.',
      category: 'code',
      icon: 'üîç',
    },
    {
      id: 'code-generate',
      name: 'G√©n√©rer du code',
      description: 'Cr√©er du code selon vos sp√©cifications',
      prompt: 'G√©n√®re du code propre et bien document√© pour : ',
      category: 'code',
      icon: '‚ö°',
    },
    {
      id: 'code-debug',
      name: 'D√©bugger',
      description: 'Identifier et corriger les erreurs',
      prompt:
        'Analyse ce code et identifie les erreurs. Propose des corrections avec explications d√©taill√©es.',
      category: 'code',
      icon: 'üêõ',
    },
    {
      id: 'document-summarize',
      name: 'R√©sumer un document',
      description: 'Synth√®se claire et structur√©e',
      prompt:
        'Fais un r√©sum√© structur√© de ce document en gardant les points cl√©s et les informations importantes.',
      category: 'document',
      icon: 'üìÑ',
    },
    {
      id: 'multimodal-compare',
      name: 'Comparer image et texte',
      description: 'Analyser la coh√©rence texte/image',
      prompt:
        'Compare cette image avec le texte fourni. Analyse les correspondances, diff√©rences et coh√©rence entre les deux.',
      category: 'image',
      icon: 'üîÑ',
    },
  ];

  constructor(private http: HttpClient) {}

  // Envoi de message standard
  sendMessage(
    content: string,
    options?: {
      imageUrl?: string;
      type?: 'text' | 'code' | 'multimodal' | 'document';
      language?: string;
      fileName?: string;
    }
  ): Observable<ChatResponse> {
    const message: ChatMessage = {
      role: 'user',
      content,
      timestamp: new Date(),
      imageUrl: options?.imageUrl,
      type: options?.type || 'text',
      language: options?.language,
      fileName: options?.fileName,
    };

    this.addMessage(message);

    // Pr√©parer la conversation avec plus de contexte
    const conversation = this.messagesSubject.value
      .slice(1) // Exclure le message de bienvenue
      .map((msg) => ({
        role: msg.role,
        content: msg.content,
        ...(msg.imageUrl && { imageUrl: msg.imageUrl }),
      }));

    // Choisir l'endpoint selon le type
    const endpoint = options?.imageUrl ? '/multimodal' : '/message';

    const payload = {
      message: content,
      conversation,
      ...(options?.imageUrl && { imageUrl: options.imageUrl }),
      options: {
        temperature: 0.7,
        max_tokens: options?.type === 'document' ? 4000 : 2000,
        ...(options?.type === 'code' && {
          temperature: 0.3, // Plus pr√©cis pour le code
          max_tokens: 3000,
        }),
      },
    };

    return this.http.post<ChatResponse>(`${this.apiUrl}${endpoint}`, payload);
  }

  // Envoi de message avec template
  sendMessageWithTemplate(
    templateId: string,
    content: string,
    imageUrl?: string
  ): Observable<ChatResponse> {
    const template = this.promptTemplates.find((t) => t.id === templateId);
    if (!template) {
      throw new Error('Template non trouv√©');
    }

    const fullPrompt = template.prompt + (content ? '\n\n' + content : '');

    return this.sendMessage(fullPrompt, {
      imageUrl,
      type:
        template.category === 'image'
          ? 'multimodal'
          : (template.category as any),
    });
  }

  // Upload et analyse d'image
  uploadAndAnalyzeImage(
    file: File,
    analysisType: 'analyze' | 'ocr' | 'custom' = 'analyze',
    customPrompt?: string
  ): Observable<ChatResponse> {
    return new Observable((observer) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const imageUrl = e.target?.result as string;

        let prompt = '';
        switch (analysisType) {
          case 'analyze':
            prompt =
              "Analyse cette image en d√©tail. D√©cris ce que tu vois, les objets, les couleurs, la composition et l'ambiance.";
            break;
          case 'ocr':
            prompt =
              'Extrait et transcris tout le texte visible dans cette image de mani√®re organis√©e.';
            break;
          case 'custom':
            prompt = customPrompt || 'D√©cris cette image.';
            break;
        }

        this.sendMessage(prompt, { imageUrl, type: 'multimodal' }).subscribe(
          observer
        );
      };
      reader.readAsDataURL(file);
    });
  }

  // G√©n√©ration de code avanc√©e
  generateCode(
    specification: string,
    language: string,
    complexity: 'simple' | 'intermediate' | 'advanced' = 'intermediate'
  ): Observable<ChatResponse> {
    const complexityPrompts = {
      simple: 'G√©n√®re du code simple et bien comment√©',
      intermediate:
        "G√©n√®re du code robuste avec gestion d'erreurs et bonnes pratiques",
      advanced:
        'G√©n√®re du code optimis√©, scalable avec patterns avanc√©s et tests',
    };

    const prompt = `${complexityPrompts[complexity]} en ${language} pour : ${specification}

Inclus :
- Code principal bien structur√©
- Commentaires explicatifs
- Gestion d'erreurs appropri√©e
- Exemples d'utilisation si pertinent`;

    return this.sendMessage(prompt, { type: 'code', language });
  }

  // Traitement de documents longs
  processLongDocument(
    content: string,
    action: 'summarize' | 'analyze' | 'extract' | 'translate',
    options?: any
  ): Observable<ChatResponse> {
    const actionPrompts = {
      summarize:
        'Fais un r√©sum√© structur√© et d√©taill√© de ce document en gardant toutes les informations importantes',
      analyze:
        'Analyse ce document : structure, th√®mes principaux, arguments cl√©s, conclusions',
      extract:
        'Extrait les informations cl√©s, dates importantes, noms, chiffres et concepts principaux',
      translate: `Traduis ce document en ${
        options?.targetLanguage || 'fran√ßais'
      } en gardant le sens et la structure`,
    };

    const prompt = `${actionPrompts[action]} :

${content}`;

    return this.sendMessage(prompt, { type: 'document' });
  }

  addMessage(message: ChatMessage) {
    const current = this.messagesSubject.value;
    this.messagesSubject.next([...current, message]);
  }

  addAssistantMessage(content: string, metadata?: any) {
    this.addMessage({
      role: 'assistant',
      content,
      timestamp: new Date(),
      metadata,
    });
  }

  clearChat() {
    this.messagesSubject.next([
      {
        role: 'assistant',
        content: `üöÄ Nouvelle conversation !

Je suis pr√™t pour :
‚Ä¢ üñºÔ∏è Analyser vos images
‚Ä¢ üíª G√©n√©rer/d√©bugger du code
‚Ä¢ üìö Traiter vos documents
‚Ä¢ üß† Combiner texte et visuels

Que souhaitez-vous faire ?`,
        timestamp: new Date(),
        type: 'text',
      },
    ]);
  }

  getPromptTemplates(category?: string): PromptTemplate[] {
    return category
      ? this.promptTemplates.filter((t) => t.category === category)
      : this.promptTemplates;
  }

  // Statistiques de conversation
  getConversationStats() {
    const messages = this.messagesSubject.value;
    return {
      totalMessages: messages.length,
      userMessages: messages.filter((m) => m.role === 'user').length,
      assistantMessages: messages.filter((m) => m.role === 'assistant').length,
      imagesProcessed: messages.filter((m) => m.imageUrl).length,
      codeGenerated: messages.filter((m) => m.type === 'code').length,
      documentsProcessed: messages.filter((m) => m.type === 'document').length,
      estimatedTokens: messages.reduce(
        (acc, m) => acc + m.content.length / 4,
        0
      ), // Estimation approximative
    };
  }
}
